name: SFDX Code Scan and Store in Salesforce

on:
  push:
    branches:
      - "**"

jobs:
  quality-gate-code-check:
    runs-on: ubuntu-latest
    outputs:
      scanner-report-path: ${{ steps.upload-report.outputs.artifact-path }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify Salesforce CLI Installation
        run: sf --version

      - name: Authenticate with Salesforce
        id: sf-auth
        run: |
          response=$(curl -X POST "https://login.salesforce.com/services/oauth2/token" \
            -d "grant_type=password" \
            -d "client_id=${{ secrets.SF_CLIENT_ID }}" \
            -d "client_secret=${{ secrets.SF_CLIENT_SECRET }}" \
            -d "username=${{ secrets.SF_USERNAME }}" \
            -d "password=${{ secrets.SF_PASSWORD }}" )
          SF_ACCESS_TOKEN=$(echo "$response" | jq -r '.access_token')

          if [ -z "$SF_ACCESS_TOKEN" ]; then
            echo "Salesforce authentication failed."
            exit 1
          fi

          echo "SF_ACCESS_TOKEN=$SF_ACCESS_TOKEN" >> $GITHUB_ENV
          echo "Successfully authenticated with Salesforce."

      - name: Get Repository and Branch Info
        id: get-info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s')

          FILE_TITLE="Code Scanner Delta Report_${REPO_NAME}_${BRANCH_NAME}_${COMMIT_LABEL}"
          echo "FILE_TITLE=${FILE_TITLE}" >> $GITHUB_ENV

          echo "Repository: $REPO_NAME"
          echo "Branch: $BRANCH_NAME"
          echo "Commit Message: $COMMIT_LABEL"

      - name: Extract changed lines and create temporary files
        id: get-changes
        run: |
          mkdir -p temp_scanner_files
          > changed_cls_lwc_files.txt

          # Get changed .cls and .lwc files
          changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$' || true)

          if [ -z "$changed_files" ]; then
            echo "No relevant .cls or .lwc changes found."
            exit 0
          fi

          for file in $changed_files; do
            echo "Processing file: $file"
            
            # Extract changed lines
            changed_lines=$(git diff --cached --unified=0 "$file" | grep '^+' | grep -v '+++' | cut -d'+' -f2-)

            if [ -n "$changed_lines" ]; then
              echo "Changed lines in $file:"
              echo "$changed_lines"

              # Create a temporary file
              temp_file="temp_scanner_files/temp_${file//\//_}"
              echo "/* Temporary file for scanning changed lines */" > "$temp_file"

              # Detect file type and wrap correctly
              if [[ "$file" == *.cls ]]; then
                echo "/**" >> "$temp_file"
                echo " * @description Temporary wrapper class for scanning changed lines." >> "$temp_file"
                echo " */" >> "$temp_file"
                echo "public class TempWrapperClass {" >> "$temp_file"
                echo "    /**" >> "$temp_file"
                echo "     * @description This method contains the changed lines extracted from the original file." >> "$temp_file"
                echo "     */" >> "$temp_file"
                echo "    public static void tempMethod() {" >> "$temp_file"
                echo "        /* Begin of extracted changed lines */" >> "$temp_file"
                echo "$changed_lines" >> "$temp_file"
                echo "        /* End of extracted changed lines */" >> "$temp_file"
                echo "    }" >> "$temp_file"
                echo "}" >> "$temp_file"
              elif [[ "$file" == *.lwc ]]; then
                echo "<!-- Temporary file for scanning changed lines -->" >> "$temp_file"
                echo "<template>" >> "$temp_file"
                echo "    <!-- Begin of extracted changed lines -->" >> "$temp_file"
                echo "$changed_lines" >> "$temp_file"
                echo "    <!-- End of extracted changed lines -->" >> "$temp_file"
                echo "</template>" >> "$temp_file"
              fi

              echo "$temp_file" >> changed_cls_lwc_files.txt
              echo "Created temp file: $temp_file"
            else
              echo "No relevant changes in $file."
            fi
          done

          if [ ! -s changed_cls_lwc_files.txt ]; then
            echo "No temp files created. Exiting."
            exit 0
          fi

      - name: Run SFDX Scanner on Temporary Files
        run: |
          files=$(cat changed_cls_lwc_files.txt)
          if [ -z "$files" ]; then
            echo "No files to scan. Creating an empty report."
            echo "[]" > scanner-report.json
            exit 0
          fi
          
          for file in $files; do
            echo "Running SFDX Scanner on file: $file"
            sf scanner:run --target "$file" --format "json" --outfile "scanner-report.json" --pmdconfig "force-app/main/default/Custom_apex_ruleset.xml" || echo "Scanner run failed for $file"
          done

          if [ ! -f "scanner-report.json" ]; then
            echo "Scanner report not generated."
            exit 1
          fi

      - name: Block PR merge if severity 3 violations are found
        id: block-check
        run: |
          severity_fail_count=$(grep -oP '"severity":\s*3' scanner-report.json | wc -l)

          echo "Severity 3 Issues Count: $severity_fail_count"

          if [ "$severity_fail_count" -gt 0 ]; then
            echo "Blocking commit due to severity 3 vulnerabilities found."
            exit 1
          else
            echo "No severity 3 vulnerabilities found. Proceeding."
          fi

      - name: Upload Scanner Report as Artifact
        id: upload-report
        uses: actions/upload-artifact@v4
        with:
          name: SFDX_Code_Scan_Report
          path: scanner-report.json

      - name: Upload Scanner Report to Salesforce
        if: success()
        run: |
          if [ -s scanner-report.json ]; then
            response=$(curl -X POST "https://sprintparkllc4-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion" \
              -H "Authorization: Bearer $SF_ACCESS_TOKEN" \
              -H "Content-Type: multipart/form-data" \
              -F "entity_content={\"Title\": \"${{ env.FILE_TITLE }}\", \"PathOnClient\": \"scanner-report.json\"};type=application/json" \
              -F "VersionData=@scanner-report.json;type=application/json")

            contentVersionId=$(echo "$response" | jq -r '.id // empty')

            if [ -z "$contentVersionId" ]; then
              echo "Error: Failed to upload file."
              exit 1
            fi

            echo "Successfully uploaded scanner report to Salesforce."
          else
            echo "No scanner report generated, skipping upload."
            exit 1
          fi

  quality-gate-critical-permissions-check:
    runs-on: ubuntu-latest
    needs: quality-gate-code-check
    if: ${{ needs.quality-gate-code-check.outputs.block-pr == 'false' || needs.quality-gate-code-check.outputs.block-pr == '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Scanner Report
        uses: actions/download-artifact@v4
        with:
          name: SFDX_Code_Scan_Report

      - name: Scan Profiles and Permission Sets for Critical Permissions
        run: |
          CRITICAL_PERMISSIONS=( "AssignPermissionSets" "AuthorApex" "CustomizeApplication" "FreezeUsers" "ManageEncryptionKeys" "ManageInternalUsers" "ManagePasswordPolicies" "ManageProfilesPermissionSets" "ManageRoles" "ManageSharing" "ManageUsers" "ModifyAllData" "MonitorLoginHistory" "MultiFactorAuthenticationRequired" "PasswordNeverExpires" "ResetPasswordsUnlockUsers" "ViewAllData" )
          BLOCKED_FILES=()
          for FILE in $(find force-app/main/default/profiles -name '*.profile-meta.xml'); do
            for PERMISSION in "${CRITICAL_PERMISSIONS[@]}"; do
              if grep -q "$PERMISSION" "$FILE" && ! grep -q "System Administrator" "$FILE"; then
                BLOCKED_FILES+=("$FILE")
              fi
            done
          done
          if [ ${#BLOCKED_FILES[@]} -gt 0 ]; then
            echo "Critical permissions found in the following files:"
            for FILE in "${BLOCKED_FILES[@]}"; do
              echo "$FILE"
            done
            exit 1
          else
            echo "No critical permissions assigned to non-System Administrator profiles or permission sets."
          fi
