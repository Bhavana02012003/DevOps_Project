name: Notify Slack on PR Assignment and Review

on:
  pull_request:
    types:
      - assigned
      - review_requested

  pull_request_review:
    types:
      - submitted

jobs:
  notify_slack:
    runs-on: ubuntu-latest

    steps:
      - name: Get Slack User Mapping
        env:
          SLACK_USER_MAP: ${{ secrets.SLACK_USER_MAP }}
          REVIEWER_GITHUB: "${{ github.event.requested_reviewer.login || github.event.assignee.login }}"
          AUTHOR_GITHUB: "${{ github.event.pull_request.user.login }}"
        run: |
          echo "Fetching Slack IDs for users..."
          
          echo "DEBUG: GitHub username of assigned reviewer = $REVIEWER_GITHUB"
          echo "DEBUG: GitHub username of PR author = $AUTHOR_GITHUB"

          # Extract Slack ID for the assigned reviewer
          REVIEWER_SLACK_ID=$(echo "$SLACK_USER_MAP" | jq -r --arg user "$REVIEWER_GITHUB" '.[$user]')
          
          # Extract Slack ID for the PR author
          AUTHOR_SLACK_ID=$(echo "$SLACK_USER_MAP" | jq -r --arg user "$AUTHOR_GITHUB" '.[$user]')

          echo "DEBUG: Reviewer's Slack ID = $REVIEWER_SLACK_ID"
          echo "DEBUG: Author's Slack ID = $AUTHOR_SLACK_ID"

          echo "REVIEWER_SLACK_ID=$REVIEWER_SLACK_ID" >> $GITHUB_ENV
          echo "AUTHOR_SLACK_ID=$AUTHOR_SLACK_ID" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: scan-report
          path: ./scanner-report.csv  # Replace with the actual file path

      - name: Generate Artifact URL
        run: |
          ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts"
          echo "Artifact URL: $ARTIFACT_URL"
          echo "ARTIFACT_URL=$ARTIFACT_URL" >> $GITHUB_ENV

      - name: Send Slack DM to Assigned Reviewer
        if: github.event.action == 'assigned' || github.event.action == 'review_requested'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          PR_NUMBER: "${{ github.event.pull_request.number }}"
          PR_TITLE: "${{ github.event.pull_request.title }}"
          PR_URL: "${{ github.event.pull_request.html_url }}"
          PR_AUTHOR: "${{ github.event.pull_request.user.login }}"
        run: |
          if [ -n "$REVIEWER_SLACK_ID" ] && [ "$REVIEWER_SLACK_ID" != "null" ]; then
            echo "Sending Slack DM to reviewer: $REVIEWER_SLACK_ID"
            curl -X POST -H "Authorization: Bearer $SLACK_BOT_TOKEN" -H "Content-type: application/json" \
            --data '{
              "channel": "'"$REVIEWER_SLACK_ID"'",
              "text": ":wave: *You have been assigned a PR for review!*\n\nüìå *Title:* '"$PR_TITLE"'\nüî¢ *PR Number:* #'"$PR_NUMBER"'\nüìù *Author:* '"$PR_AUTHOR"'\nüîó *PR Link:* '"$PR_URL"'"
            }' https://slack.com/api/chat.postMessage
          else
            echo "ERROR: No valid Slack ID found for reviewer: $REVIEWER_GITHUB"
          fi

      - name: Send Slack DM to PR Author with Artifact
        if: github.event_name == 'pull_request_review' && github.event.action == 'submitted'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          PR_NUMBER: "${{ github.event.pull_request.number }}"
          PR_TITLE: "${{ github.event.pull_request.title }}"
          PR_URL: "${{ github.event.pull_request.html_url }}"
          REVIEWER: "${{ github.event.review.user.login }}"
          REVIEW_STATE: "${{ github.event.review.state }}"
          REVIEW_BODY: "${{ github.event.review.body }}"
          ARTIFACT_URL: "${{ env.ARTIFACT_URL }}"
        run: |
          if [ -n "$AUTHOR_SLACK_ID" ] && [ "$AUTHOR_SLACK_ID" != "null" ]; then
            echo "Sending Slack DM to PR Author: $AUTHOR_SLACK_ID"
            curl -X POST -H "Authorization: Bearer $SLACK_BOT_TOKEN" -H "Content-type: application/json" \
            --data '{
              "channel": "'"$AUTHOR_SLACK_ID"'",
              "text": ":speech_balloon: *Your PR has been reviewed!*\n\nüìå *Title:* '"$PR_TITLE"'\nüî¢ *PR Number:* #'"$PR_NUMBER"'\nüë§ *Reviewed by:* '"$REVIEWER"'\nüìÑ *Review State:* '"$REVIEW_STATE"'\nüí¨ *Comments:* '"$REVIEW_BODY"'\nüîó *PR Link:* '"$PR_URL"'\n\nüìÇ *Download Artifact:* <'"$ARTIFACT_URL"'|Click here>"
            }' https://slack.com/api/chat.postMessage
          else
            echo "ERROR: No valid Slack ID found for author: $AUTHOR_GITHUB"
          fi
