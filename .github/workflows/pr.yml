name: PR Approval & Merge Tracking
 
on:
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [closed]  # Triggers when a PR is merged
 
jobs:
  pr_process:
    runs-on: ubuntu-latest
 
    steps:
      - name: Authenticate with Salesforce
        id: sf-auth
        run: |
            response=$(curl -X POST "https://login.salesforce.com/services/oauth2/token" \
                -d "grant_type=password" \
                -d "client_id=${{ secrets.SF_CLIENT_ID }}" \
                -d "client_secret=${{ secrets.SF_CLIENT_SECRET }}" \
                -d "username=${{ secrets.SF_USERNAME }}" \
                -d "password=${{ secrets.SF_PASSWORD }}" )
            SF_ACCESS_TOKEN=$(echo "$response" | jq -r '.access_token')

            if [ -z "$SF_ACCESS_TOKEN" ]; then
                echo "Salesforce authentication failed."
                exit 1
            fi

            echo "SF_ACCESS_TOKEN=$SF_ACCESS_TOKEN" >> $GITHUB_ENV
            echo "Successfully authenticated with Salesforce."

      - name: Determine PR Status
        id: pr_status_check
        run: |
          PR_STATUS="Pending"
          MERGED_BY=""
 
          if [[ "${{ github.event.review.state }}" == "approved" ]]; then
            PR_STATUS="Approved"
          elif [[ "${{ github.event.review.state }}" == "changes_requested" ]]; then
            PR_STATUS="Changes Requested"
          fi
 
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            PR_STATUS="Merged"
            MERGED_BY="${{ github.event.pull_request.merged_by.login }}"
          fi
 
          echo "::set-output name=PR_STATUS::$PR_STATUS"
          echo "::set-output name=MERGED_BY::$MERGED_BY"
 
      - name: Fetch all check runs for the PR
        id: fetch_checks
        run: |
          CHECK_RUNS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/check-runs)
 
          CHECK_NAMES=$(echo "$CHECK_RUNS" | jq -r '.check_runs[] | select(.status == "completed") | .name' | paste -sd "," -)
          CHECK_STATUSES=$(echo "$CHECK_RUNS" | jq -r '.check_runs[] | select(.status == "completed") | .conclusion' | paste -sd "," -)
 
          echo "::set-output name=CHECK_NAMES::$CHECK_NAMES"
          echo "::set-output name=CHECK_STATUSES::$CHECK_STATUSES"
 
      - name: Check if PR Record Exists in Salesforce
        id: check_existing_pr
        run: |
          PR_LINK="${{ github.event.pull_request.html_url }}"
 
          RESPONSE=$(curl -s -X GET "https://sprintparkllc4-dev-ed.develop.my.salesforce.com/services/data/v61.0/query/?q=SELECT+Id,PR_Status__c,PR_Reviewer__c,PR_Review_Comment__c+FROM+Pull_Request__c+WHERE+PR_Link__c='${PR_LINK}'" \
            -H "Authorization: Bearer $SF_ACCESS_TOKEN" \
            -H "Content-Type: application/json")
 
          RECORD_ID=$(echo "$RESPONSE" | jq -r '.records[0].Id // empty')
          EXISTING_STATUS=$(echo "$RESPONSE" | jq -r '.records[0].PR_Status__c // empty')
          EXISTING_REVIEWER=$(echo "$RESPONSE" | jq -r '.records[0].PR_Reviewer__c // empty')
          EXISTING_COMMENT=$(echo "$RESPONSE" | jq -r '.records[0].PR_Review_Comment__c // empty')
 
          if [[ -n "$RECORD_ID" ]]; then
            echo "Existing PR Record Found: $RECORD_ID"
            echo "::set-output name=EXISTING_ID::$RECORD_ID"
            echo "::set-output name=EXISTING_REVIEWER::$EXISTING_REVIEWER"
            echo "::set-output name=EXISTING_COMMENT::$EXISTING_COMMENT"
          else
            echo "No existing PR record found"
            echo "::set-output name=EXISTING_ID::"
            echo "::set-output name=EXISTING_REVIEWER::"
            echo "::set-output name=EXISTING_COMMENT::"
          fi
 
      - name: Send PR Information to Salesforce (Create or Update)
        run: |
          prStatus="${{ steps.pr_status_check.outputs.PR_STATUS }}"
          mergedBy="${{ steps.pr_status_check.outputs.MERGED_BY }}"
          newReviewer="${{ github.event.review.user.login }}"
          newComment="${{ github.event.review.body }}"
          existingReviewer="${{ steps.check_existing_pr.outputs.EXISTING_REVIEWER }}"
          existingComment="${{ steps.check_existing_pr.outputs.EXISTING_COMMENT }}"
          recordId="${{ steps.check_existing_pr.outputs.EXISTING_ID }}"
          prLink="${{ github.event.pull_request.html_url }}"
 
          # Retain existing reviewers and append new ones if needed
          if [[ -n "$existingReviewer" && "$existingReviewer" != "null" ]]; then
            updatedReviewer="$existingReviewer $newReviewer"
          else
            updatedReviewer="$newReviewer"
          fi
 
          # Retain existing review comments and append new ones if needed
          if [[ -n "$existingComment" && "$existingComment" != "null" ]]; then
            updatedComment="$existingComment  $newComment"
          else
            updatedComment="$newComment"
          fi
 
          # Prepare JSON payload
          PAYLOAD='{
            "PR_Title__c": "'"${{ github.event.pull_request.title }}"'",
            "PR_Link__c": "'"$prLink"'",
            "PR_Status__c": "'"$prStatus"'",
            "PR_Author__c": "'"${{ github.event.pull_request.user.login }}"'",
            "PR_Reviewer__c": "'"$updatedReviewer"'",
            "Code_Analyzer_Check_Status__c": "'"${{ steps.fetch_checks.outputs.CHECK_STATUSES }}"'",
            "Code_Analyzer_Check_Name__c": "'"${{ steps.fetch_checks.outputs.CHECK_NAMES }}"'",
            "PR_Review_Comment__c": "'"$updatedComment"'"
          }'
 
          # If merged, add PR_Merged_By__c
          if [[ -n "$mergedBy" ]]; then
            PAYLOAD=$(echo "$PAYLOAD" | jq --arg mergedBy "$mergedBy" '. + { "PR_Merged_By__c": $mergedBy }')
          fi
 
          if [[ -n "$recordId" ]]; then
            echo "Updating existing PR record: $recordId"
            RESPONSE=$(curl -X PATCH "https://sprintparkllc4-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/Pull_Request__c/$recordId" \
              -H "Authorization: Bearer $SF_ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD")
          else
            echo "Creating a new PR record"
            RESPONSE=$(curl -X POST "https://sprintparkllc4-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/Pull_Request__c/" \
              -H "Authorization: Bearer $SF_ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD")
          fi
 
          echo "Response: $RESPONSE"